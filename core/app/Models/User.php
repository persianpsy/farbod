<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Hash;
use Laravel\Passport\HasApiTokens;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    use HasFactory, Notifiable;
    use HasApiTokens;
    use HasRoles;
    use SoftDeletes;
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'first_name',
        'last_name',
        'cellphone',
        'password',
        'national_code',
        'avatar',
        'phone',
        'email',
        'email_verified_at',
        'address',
        'birth_county',
        'residence',
        'birthday',
        'father_name',
        'desc',
        'skyroom_id',
        'auth_code',
        'en_first_name',
        'en_last_name',
        'en_desc',
    ];
    protected $guarded = [];
    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];
    protected $with = ['media','staff','category'];
    protected $appends = ['full_name',
        'en_full_name','has_answered',
        'toman_balance','dollar_balance'
        ,'toman_balance_removable',
        'dollar_balance_removable'
    ];
    protected static function boot() {
        parent::boot();
        static::addGlobalScope('order', function (Builder $builder) {
            $builder->orderBy('created_at', 'desc');
        });
    }

    public function save(array $options = [])
    {
        return parent::save($options); // TODO: Change the autogenerated stub
    }

    protected $guard_name = 'api';
    public function findForPassport($username)
    {
        return $this->where('cellphone', $username)->first();
    }
    public function getAuthPassword()
    {
        if ($this->hasRole('admin') || $this->hasRole('doctor') || !$this->auth_code)
            return $this->password;
        else
            return $this->auth_code;
    }

    public function getFullNameAttribute()
    {
        return $this->first_name.' '.$this->last_name;
    }
    public function getEnFullNameAttribute()
    {
        return $this->en_first_name.' '.$this->en_last_name;
    }
    public function getHasAnsweredAttribute()
    {
        return (bool)Answer::where('user_id',$this->id)->get()->count();
    }
    public function getTomanBalanceAttribute()
    {
        if ($this->hasRole('doctor')) {
            $staff_id = $this->staff->id;
            $reserve_toman_money = Reservation::whereHas('appointment', function ($q) use ($staff_id) {
                $q->where('staff_id', $staff_id);
            })->where('status', 1)->whereHas('payment',function ($q){
                $q->where('gateway','!=','paypal');
            })->get()->sum('price');

            $withdraws = Asset::where(['type' => 3, 'status' => 2])->sum('price');

            return $reserve_toman_money - $withdraws;
        }
    }
    public function getDollarBalanceAttribute()
    {
        if ($this->hasRole('doctor')) {
            $staff_id = $this->staff->id;
            $reserve_dollar_money = Reservation::whereHas('appointment', function ($q) use ($staff_id) {
                $q->where('staff_id', $staff_id);
            })->where('status', 1)->whereHas('payment',function ($q){
                $q->where('gateway','paypal');
            })->get()->sum('price');

            $withdraws = Asset::where(['type' => 4, 'status' => 2])->sum('price');

            return $reserve_dollar_money - $withdraws;
        }
    }

    public function getDollarBalanceRemovableAttribute()
    {
        if ($this->hasRole('doctor')) {
            $staff_id = $this->staff->id;
            $reserve_dollar_money = Reservation::whereHas('appointment', function ($q) use ($staff_id) {
                $q->where('staff_id', $staff_id);
            })->where('status', 1)->whereHas('payment',function ($q){
                $q->where('gateway','paypal');
            })->get()->sum('price');

            $commission = $this->staff->commission;
            $commission_price = ($reserve_dollar_money*$commission)/100;

            $withdraws = Asset::where(['type' => 4, 'status' => 2])->sum('price');
            $total_staff_income = $reserve_dollar_money-$commission_price;
            return $total_staff_income-$withdraws;
        }
    }

    public function getTomanBalanceRemovableAttribute()
    {
        if ($this->hasRole('doctor')) {
            $staff_id = $this->staff->id;
            $reserve_toman_money = Reservation::whereHas('appointment', function ($q) use ($staff_id) {
                $q->where('staff_id', $staff_id);
            })->where('status', 1)->whereHas('payment',function ($q){
                $q->where('gateway','!=','paypal');
            })->get()->sum('price');

            $withdraws = Asset::where(['type' => 3, 'status' => 2])->sum('price');
            $commission = $this->staff->commission;
            $commission_price = ($reserve_toman_money*$commission)/100;
            $total_staff_income = $reserve_toman_money-$commission_price;
            return $total_staff_income-$withdraws;
        }
    }

    public function media()
    {
        return $this->belongsTo(Media::class,'avatar');
    }
    public function wallet()
    {
        return $this->hasMany(Wallet::class,'user_id');
    }
    public function staff()
    {
        return $this->hasOne(Staff::class,'user_id');
    }
    public function reservations()
    {
        return $this->hasMany(Reservation::class,'user_id');
    }
    public function coupon()
    {
        return $this->hasMany(Coupon::class,'user_id');
    }
    public function category()
    {
        return $this->hasMany(CategoryStaff::class,'user_id');
    }
}
